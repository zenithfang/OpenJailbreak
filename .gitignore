# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is usually recommended to ignore the cache and logs/ directories.
#  https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# PROJECT SPECIFIC IGNORES
# ======================

# Outdated attacks (excluded from version control)
src/autojailbreak/outdated_attacks/

# Analysis folders (paper-specific and experimental results)
analysis/*/

# Logs and runtime data
logs/
*.log
*.out
*.err

# Results and outputs
results/
outputs/
checkpoints/
saved_models/
model_cache/

# Environment setup scripts
setup_env.sh
examples/scripts/setup_env.*

# Cursor IDE specific files
.cursor/
.cursorignore

# Framework memory bank (contains personal/local context)
memory-bank/

# Data files (add specific patterns as needed)
data/
datasets/
*.csv
*.json
*.jsonl
*.txt
*.tsv
!requirements.txt
!setup.txt
!README.txt
!analysis/*.json
# Exception: Include ALL files in assets folder (override general file type exclusions)
!assets/**
# But still ignore __pycache__ directories even in assets
assets/**/__pycache__/

# Model files and caches
*.pt
*.pth
*.bin
*.safetensors
models/
huggingface_cache/
transformers_cache/
.cache/

# API keys and secrets
.env.local
.env.development
.env.test
.env.production
.env.*
!.env.example
config/secrets.yaml
config/api_keys.yaml
secrets/
credentials/
*.key
*.pem
*.p12
*.p8
*.secrets
api_keys/
auth/
service_account.json

# Temporary experiment files
experiments/
temp/
tmp/
scratch/

# Large files that shouldn't be in git
*.zip
*.tar.gz
*.rar
*.7z
*.pkl
*.pickle
*.npy
*.npz

# Jupyter notebook outputs
*.ipynb
!examples/*.ipynb

# Memory bank personal files (keep structure but not personal content)
memory-bank/personal/
memory-bank/temp/
memory-bank/*.backup

# OS and editor generated files
.directory
*.swp
*.swo
*~
to_impl.md
assets/x_teaming_data/attacker_agent.py
assets/x_teaming_data/main.py
assets/x_teaming_data/tgd.py

# Papers cache/markdown
attacks_paper_info/
attacks_paper_md/
/kaggle_writeup.md
